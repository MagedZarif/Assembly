//the components
//3 not gate
//3 Multiplexer 4*1
//3 full adder
//3 AND gate
//1 NAND gate

/*
Explanation of the circle
there 3 mux4*1 for 3 bits and each mux4*1 has 4 cases first case input is logical 1 , second case input 1 bit from b,
third and case iput not to complete part of 2's. ther NAND take s0,s1 and put it in AND gate with bit from A to ignore A in case 4(-B).
output mux4*1 and output AND gate enter in full_adder and input carry taxe from s1 to complete 2's in case 3 and 4
and output (-B) final output G(G0,G1,G2)and carry(c2) if there.
*/




//////////////////////////////////////////////////////////////////////////////////
/*
The full adder is a digital component that performs three numbers an implemented using the logic gates
The module full adder contains two outputs sum and carry And input variables X, Y and Z .

*/
module full_adder(output sum, output carry, input x, input y,input z
);
wire s1,c1,c2;
xor(s1,x,y);
xor(sum,s1,z);
and(c1,x,y);
and(c2,z,s1);
or(carry,c1,c2);
endmodule

///////////////////////////////////////////////////////
/*module full_adder_test();
   reg a, b, c;
   wire sum, carry;
   full_adder f(sum, carry, a, b, c);
   initial
   begin
      $monitor($time, " a=%b, b=%b, c=%b, carry=%b, sum=%b", a, b, c, carry, sum);
      a=0; b=0; c=0;
      #10 a=0; b=0; c=1;
      #10 a=0; b=1; c=0;
      #10 a=0; b=1; c=1;
      #10 a=1; b=0; c=0;
      #10 a=1; b=0; c=1;
      #10 a=1; b=1; c=0;
      #10 a=1; b=1; c=1;
      $finish;
   end
endmodule
*/


/////////////////////////////////////////////
/*input a,b,c,d and output out(single output)*/
module multiplexer(out, b,  s0, s1);

output out;
input  b, c, d, s0, s1;
wire sobar, s1bar,bbar, T1, T2, T3, T4;

not (s0bar, s0), (s1bar, s1),(bbar,b);
and (T1, 1, s1bar, s0bar), (T2, b, s1bar, s0),(T3, bbar, s1, s0bar), (T4, bbar, s1, s0);
or(out, T1, T2, T3, T4);

endmodule


/*
module multiplexer_test();
   reg  b, s0,s1;
   wire out;
   multiplexer f(out, b,s0,s1);
   initial
   begin
      $monitor($time, " b=%b,s0=%b, s1=%b, out=%b", b, s0, s1, out);
      b=0; s0=0; s1=0;
      #10 b=1; s0=1; s1=0;
      #10 b=0; s0=0; s1=1;
      #10 b=1; s0=1; s1=1;
      #10 b=0; s0=1; s1=1;
      #10 b=1; s0=0; s1=0;
      
      $finish;
   end
endmodule

*/
//////////////////////////////////////////////////////////////
module circut(s0,s1,d0,d1,d2,b0,b1,b2,G0,G1,G2,c0,c1,c2);

output G0,G1,G2,c0,c1,c2;
input s0,s1,d0,d1,d2,b0,b1,b2;
wire max0,max1,max2,annd0,annd1,annd2,bar,t;
and(t,s0,s1);
not(bar,t);

multiplexer f1(max0, b0,  s0, s1);
and(annd0,d0,bar);
full_adder n1(G0,c0,max0,annd0,s1);

multiplexer f2(max1, b1,  s0, s1);
and(annd1,d1,bar);
full_adder n2(G1,c1,max1,annd1,c0);

multiplexer f3(max2, b2,  s0, s1);
and(annd2,d2,bar);
full_adder n3(G2,c2,annd2,max2,c1);
endmodule

/////////////////////////////////////////////////////////////////////////




module circut_test();
   reg s0,s1,d0,d1,d2,b0,b1,b2;
   wire G0,G1,G2,c0,c1,c2;
   circut f (s0,s1,d0,d1,d2,b0,b1,b2,G0,G1,G2,c0,c1,c2);
   initial
   begin
      $monitor($time, " s0=%b, s1=%b , d0=%b , d1=%b, d2=%b, b0=%b, b1=%b ,b2=%b, -> G0=%b, G1=%b, G2=%b, c2=%b",
      s0,s1,d0,d1,d2,b0,b1,b2,G0,G1,G2,c2);
       d0=0;d1=0;d2=0;b0=0;b1=0;b2=0; s0=1;s1=0;
       
       
       //s0=0 - s1=1    ->A-1
       #10 d0=1;d1=0;d2=0;b0=0;b1=1;b2=0; s0=0;s1=0;
       #10 d0=0;d1=1;d2=0;b0=1;b1=0;b2=0; s0=0;s1=0;
       #10 d0=0;d1=0;d2=1;b0=0;b1=0;b2=1; s0=0;s1=0;
       #10 d0=1;d1=1;d2=1;b0=1;b1=1;b2=1; s0=0;s1=0;
       #10 d0=0;d1=0;d2=0;b0=0;b1=1;b2=0; s0=0;s1=0;
       #10 d0=1;d1=0;d2=1;b0=0;b1=0;b2=0; s0=0;s1=0;
       #10 d0=1;d1=1;d2=0;b0=0;b1=1;b2=1; s0=0;s1=0;
       #10 d0=0;d1=1;d2=1;b0=0;b1=0;b2=0; s0=0;s1=0;
       #10 d0=0;d1=0;d2=1;b0=1;b1=1;b2=0; s0=0;s1=0;
       #10 d0=1;d1=0;d2=0;b0=0;b1=0;b2=0; s0=0;s1=0;
       
       //s0=1 - s1=1    ->-B
       #10 d0=1;d1=0;d2=0;b0=0;b1=1;b2=0; s0=1;s1=1;
       #10 d0=0;d1=1;d2=0;b0=1;b1=0;b2=0; s0=1;s1=1;
       #10 d0=0;d1=0;d2=1;b0=0;b1=0;b2=1; s0=1;s1=1;
       #10 d0=1;d1=1;d2=1;b0=1;b1=1;b2=1; s0=1;s1=1;
       #10 d0=0;d1=0;d2=0;b0=0;b1=1;b2=0; s0=1;s1=1;
       #10 d0=1;d1=0;d2=1;b0=0;b1=0;b2=0; s0=1;s1=1;
       #10 d0=1;d1=1;d2=0;b0=0;b1=1;b2=1; s0=1;s1=1;
       #10 d0=0;d1=1;d2=1;b0=0;b1=0;b2=0; s0=1;s1=1;
       #10 d0=0;d1=0;d2=1;b0=1;b1=1;b2=0; s0=1;s1=1;
       #10 d0=1;d1=0;d2=0;b0=0;b1=0;b2=0; s0=1;s1=1;
       
       //s0=0  - s1=1   ->A-B
       #10 d0=1;d1=1;d2=1;b0=0;b1=0;b2=0; s0=0;s1=1;
       #10 d0=0;d1=1;d2=0;b0=1;b1=0;b2=0; s0=0;s1=1;
       #10 d0=0;d1=0;d2=1;b0=0;b1=0;b2=1; s0=0;s1=1;
       #10 d0=1;d1=1;d2=1;b0=1;b1=1;b2=1; s0=0;s1=1;
       #10 d0=0;d1=0;d2=0;b0=0;b1=1;b2=0; s0=0;s1=1;
       #10 d0=1;d1=0;d2=1;b0=0;b1=0;b2=0; s0=0;s1=1;
       #10 d0=1;d1=1;d2=0;b0=0;b1=1;b2=1; s0=0;s1=1;
       #10 d0=0;d1=1;d2=1;b0=0;b1=0;b2=0; s0=0;s1=1;
       #10 d0=0;d1=0;d2=1;b0=1;b1=1;b2=0; s0=0;s1=1;
       #10 d0=1;d1=0;d2=0;b0=0;b1=0;b2=0; s0=0;s1=1;
       
       
       //s0=1 - s1=1    ->A+B
       #10 d0=1;d1=1;d2=1;b0=0;b1=0;b2=0; s0=1;s1=0;
       #10 d0=0;d1=1;d2=0;b0=1;b1=0;b2=1; s0=1;s1=0;
       #10 d0=0;d1=0;d2=1;b0=0;b1=0;b2=1; s0=1;s1=0;
       #10 d0=1;d1=1;d2=1;b0=1;b1=1;b2=1; s0=1;s1=0;
       #10 d0=0;d1=0;d2=0;b0=0;b1=1;b2=0; s0=1;s1=0;
       #10 d0=1;d1=0;d2=1;b0=0;b1=0;b2=0; s0=1;s1=0;
       #10 d0=1;d1=1;d2=0;b0=0;b1=1;b2=1; s0=1;s1=0;
       #10 d0=0;d1=1;d2=1;b0=0;b1=0;b2=0; s0=1;s1=0;
       #10 d0=0;d1=0;d2=1;b0=1;b1=1;b2=0; s0=1;s1=0;
       #10 d0=1;d1=0;d2=0;b0=0;b1=0;b2=0; s0=1;s1=0;
     
     $finish;
   end
endmodule


///////////////////////////////////////////////////////////////////////////////////////////////////